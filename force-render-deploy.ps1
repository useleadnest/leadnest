#!/usr/bin/env pwsh
# force-render-deploy.ps1 - Force Render to deploy latest code

Write-Host "üîÑ Forcing Render Deployment" -ForegroundColor Cyan

# Create a deployment marker with timestamp to force rebuild
$timestamp = Get-Date -Format "yyyy-MM-dd-HH-mm-ss"
$markerContent = @"
# Deployment Marker - $timestamp
# This file forces Render to recognize changes and rebuild
# Generated by force-render-deploy.ps1

DEPLOYMENT_ID="$timestamp"
GIT_COMMIT="$(git rev-parse HEAD)"
BUILD_TRIGGER="manual-force-deploy"
"@

Write-Host "Creating deployment marker..." -ForegroundColor Yellow
Set-Content -Path "backend-flask\deployment-marker-$timestamp.txt" -Value $markerContent

Write-Host "Committing and pushing..." -ForegroundColor Yellow
git add .
git commit -m "Force Render deploy - $timestamp

- Add deployment marker to trigger rebuild
- Ensure latest app.api:app export is deployed
- All endpoints should be available after this deploy"

git push origin main

Write-Host "‚úÖ Force deployment triggered!" -ForegroundColor Green
Write-Host "Monitor Render Dashboard ‚Üí leadnest-backend ‚Üí Activity for build progress" -ForegroundColor Cyan

# Wait and test
Write-Host "Waiting 30 seconds before testing..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

Write-Host "Testing deployment..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "https://api.useleadnest.com/api/deployment-info" -UseBasicParsing
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ New deployment is LIVE!" -ForegroundColor Green
        Write-Host "Response: $($response.Content)" -ForegroundColor Green
    } else {
        Write-Host "‚è≥ Deployment still in progress..." -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚è≥ Deployment still in progress or failed..." -ForegroundColor Yellow
    Write-Host "Check Render Dashboard for build status" -ForegroundColor Cyan
}
