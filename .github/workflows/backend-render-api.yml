name: Backend • Deploy via Render API + Smoke

on:
  push:
    branches: [ main, master ]
    paths:
      - "backend-flask/**"
      - ".github/workflows/backend-render-api.yml"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  build-and-unit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend-flask
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend-flask/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Lint (optional)
        run: |
          pip install flake8 || true
          flake8 . || true

      - name: Unit tests (optional)
        run: |
          if [ -f tests/__init__.py ] || ls tests/*.py >/dev/null 2>&1; then
            pip install pytest
            pytest -q
          else
            echo "No backend tests found — skipping."
          fi

  deploy:
    needs: build-and-unit
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Trigger Render deploy (API)
        id: trigger
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          set -euo pipefail
          test -n "$RENDER_API_KEY"
          test -n "$RENDER_SERVICE_ID"
          DEPLOY_JSON=$(curl -fsS -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -d '{}')
          echo "$DEPLOY_JSON"
          DEPLOY_ID=$(echo "$DEPLOY_JSON" | jq -r '.id // empty')
          if [ -z "$DEPLOY_ID" ]; then echo "No deploy id returned"; exit 1; fi
          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT

      - name: Poll Render service health
        env:
          RENDER_BACKEND_HEALTH_URL: ${{ secrets.RENDER_BACKEND_HEALTH_URL }}
        run: |
          set -euo pipefail
          test -n "$RENDER_BACKEND_HEALTH_URL"
          echo "Polling health: $RENDER_BACKEND_HEALTH_URL"
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$RENDER_BACKEND_HEALTH_URL")
            if [ "$code" = "200" ]; then echo "✅ Healthy"; exit 0; fi
            echo "… waiting ($i), got $code"; sleep 5
          done
          echo "❌ Service not healthy in time"; exit 1

  smoke:
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps for smoke
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Run Bash smoke tests (skip large CSV by default)
        env:
          API: ${{ secrets.RENDER_BACKEND_BASE_URL }}     # e.g. https://leadnest-bulletproof.onrender.com
          LOGIN_EMAIL: ${{ secrets.SMOKE_EMAIL }}
          LOGIN_PASS: ${{ secrets.SMOKE_PASSWORD }}
        run: |
          set -euo pipefail
          chmod +x ./test-leadnest.sh
          ./test-leadnest.sh "$API" "$LOGIN_EMAIL" "$LOGIN_PASS" --skip-large-csv

      - name: Upload smoke JUnit report (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-smoke-junit
          path: |
            test-results.xml
            Test-LeadNest.xml
          if-no-files-found: ignore
